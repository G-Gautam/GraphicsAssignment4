'''
Module Name: shader
Author: CS3388
Contributor: Gautam Gupta
DOC: 03-20-2021

Purpose: This class implements the shading for an object which is generated by the light source 
and by the objects. For a given list of intersections as computed by the minimumIntersection method
in the cameraMatrix.py, it computes the color for the pixel.

Contribution:
Implemented the constructor and the helper method, __shadowed. The code written closely resembles the 
algorithm as described in the lecture. 
'''
class shader:
    '''
    Module Name: __shadowed
    Author: Gautam Gupta
    DOC: 03-31-2021

    Purpose: Helper method to determine if the ray from the intersection point to the light source
    is impeded by another object from the scene

    Parameters: 
    Object: The target object which there lies the intersection of type implicitSphere.py
    I: The point of intersection of type matrix.py
    S: The vector to the light source
    objectList: A list of objects in the scene of type implicitSphere.py

    Output: True, if an object is in between the light source and the intersection point
            Else, returns false
    '''
    def __shadowed(self, object, I, S, objectList):
        M = object.getT()
        E = 0.001
        I = M * (I + S.scalarMultiply(E))
        S = M * S
        for obj in objectList:
            #M_i: inverse of matrix as associated with the object
            M_i = obj.getT().inverse()
            obj_I = M_i * I
            obj_S = M_i * S
            obj_S = obj_S.normalize()
            #If an intersection with another object exists
            if obj.intersection(obj_I, obj_S) != -1.0:
                return True
        return False
    
    '''
    Module Name: __shadowed
    Author: Gautam Gupta
    DOC: 03-31-2021

    Purpose: Construction (main) method to compute the shaded color for pixed of intersection
    
    Parameters:
    intersection: A list of tuples (k, t0) where k is the position in the list of an object that the 
                ray intersects and t0 is the min t-value of the intersection the ray makes with the object
    direction: An object of type matrix.py to represent the direction of the ray
    camera: A cameraMatrix object to implement a synthetic camera
    objectList: A list of objects of type implicitSphere.py. This class implements the type implicitObject and object.py
    light: A single light source of type lightSource.py which has a set position and intensity to influence the color


    Output: Set the self.__color property to a list of length 3 containing the RGB values as computed
    '''
    def __init__(self, intersection, direction, camera, objectList, light):
        k, t0 = intersection[0], intersection[1]
        obj = objectList[k]
        M_i = obj.getT().inverse()
        #Position of light transformed with inverse matrix of object
        t_s = M_i * light.getPosition()
        #Position of camera
        t_e = M_i * camera.getE()
        #Direction of ray transformed with inverse matrix of object
        t_d = M_i * direction
        #Intersection Point
        I = t_e + (t_d.scalarMultiply(t0))
        #Vector from light to intersection point
        S = (t_s - I)
        S = S.normalize()

        N = obj.normalVector(I)

        #R: Specular reflection vector
        R = -S + N.scalarMultiply((S.scalarMultiply(2)).dotProduct(N))
        #V: Vector to center of projection
        V = (t_e - I)
        V = V.normalize()
        #Diffuse light intensity
        i_d = max((N.dotProduct(S)), 0) 
        #Specular light intensity
        i_s = max((R.dotProduct(V)), 0)

        r = obj.getReflectance()
        c = obj.getColor()
        l_i = light.getIntensity()

        #No object impedes the light source
        if not self.__shadowed(obj, I, S, objectList):
            f = r[0] + r[1] * i_d + r[2] * (i_s ** r[3])
        else:
            f = r[0]

        #Set color for pixel
        self.__color = (int(c[0] * l_i[0] * f), int(c[1] *
                        l_i[1] * f), int(c[2] * l_i[2] * f))


    def getShade(self):
        return self.__color
